name: Rust

# On Rust, GitHub Actions, and caching
# ===========
# Here's a list of things to keep in mind if you find yourself maintaining this
# CI:
#
# https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#matching-a-cache-key
#
# - Always install and select the desired Rust toolchain *before* running
#   `Swatinem/rust-cache`. This is because the active Rust toolchain is used as
#   a cache key.
# - You can use `rustup show` to install and select the right Rust toolchain if
#   you have a `rust-toolchain.toml` file:
#   https://github.com/rust-lang/rustup/issues/1397.
# - When caching Rust compilation artifacts, keep in mind that different `cargo`
#   commands will use different profiles
#   (https://doc.rust-lang.org/cargo/reference/profiles.html). Learn what you
#   can reuse between one job and another and don't assume two commands will
#   just share caches without conflicts.
# - Be extremely aware of cache thrashing a.k.a. churning. GitHub Actions' cache
#   allows for 10GiB of data which is easily exceeded if not careful.
#   Sometimes it's better not to cache than cache excessively.
#   Disabling cache writes for non-default branches altogether if cache churning
#   is unacceptably high is supposed to help with this.
# - Learn cache invalidation rules of `Swatinem/rust-cache` before making
#   changes, e.g. what happens when `rustc --version` changes or `Cargo.lock`
#   changes (or is missing).
# - The jobs dependency tree is the way it is to accommodate for sharing caches,
#   not necessarily because it makes logical sense to run one job after the
#   other. This is due to the fact that we can't share caches between jobs that
#   run in parallel.
# - `sccache` is a good alternative to `Swatinem/rust-cache`, but it behaves
#   poorly with GHA and often incurs into cache requests rate limits. We should
#   probably explore `sccache` with a different backend.
# - If a job makes good use of extra cores, consider give it a bigger machine.
#   GHA larger runners increase in cost linearly with the number of cores
#   (https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions),
#   so you're not wasting money unless several cores are sitting idle for long.

on:
  # Relevant docs:
  # - https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue#how-merge-queues-work
  # - https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#merge_group
  merge_group:
    types: ["checks_requested"]
  push:
    branches: ["main"]
  pull_request:
    branches: ["*"]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  # This is faster for CI: https://github.com/dtolnay/rust-toolchain/issues/26.
  CARGO_INCREMENTAL: "0"
  SOLANA_CLI: v2.1.0

# Automatically cancels a job if a new commit if pushed to the same PR, branch, or tag.
# Source: <https://stackoverflow.com/a/72408109/5148606>
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  # Except in `main` branch! Any canceled job will cause the
  # CI run to fail, and we want to keep a clean history for major branches.
  cancel-in-progress: ${{ (github.ref != 'refs/heads/main') }}

jobs:
  lint:
    name: lint
    runs-on: warp-ubuntu-2404-x64-8x
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        run: |
          rustup show
          rustup install nightly
          # Nightly is needed for our configuration of cargo fmt
          rustup component add rustfmt --toolchain nightly-x86_64-unknown-linux-gnu

      - name: Install zepter, udeps and just
        uses: taiki-e/install-action@v2
        with:
          tool: zepter,just,cargo-udeps

      - name: Run lint and formatting checks
        run: just lint check-udeps

  nextest:
    name: nextest
    runs-on: warp-ubuntu-2404-x64-8x
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3

      - name: Install nextest and just
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest,just

      - name: Run tests
        run: just test
